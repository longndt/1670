// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tut3.Data;

namespace Tut3.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241122071826_seed data")]
    partial class seeddata
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "admin-role",
                            ConcurrencyStamp = "a0fd3158-a861-4ded-9f32-3e1dfa2c1b8a",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "user-role",
                            ConcurrencyStamp = "4c091e43-def0-47ee-9667-6783ff7ed1af",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "admin-account",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a4d06cd8-d86d-40b1-8c4d-462fe2b83084",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAUrb659KD6X1NuZURqg2yH7Q6pvVoq1ezswrmXlpE5y0+HNsg1QERJ5Uuk4dOxOPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6b85fe43-10bb-4dcb-bca0-525de3b103e2",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "user-account",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "115febe7-7fe8-4e1e-b6b1-6c4e04fbc637",
                            Email = "user@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@GMAIL.COM",
                            NormalizedUserName = "USER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPv1KojRDLqN5/v6OUcMDA5C5QFZAEmVnJ6LQiMwQR5Se92uZyjHdPdgF27l/gOW0w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a968fad2-e3eb-49b5-b999-bfaa5c5b357f",
                            TwoFactorEnabled = false,
                            UserName = "user@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "admin-account",
                            RoleId = "admin-role"
                        },
                        new
                        {
                            UserId = "user-account",
                            RoleId = "user-role"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Tut3.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brand");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Gaming"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Business"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ultrabook"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Convertible"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Workstation"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Budget"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Chromebook"
                        },
                        new
                        {
                            Id = 8,
                            Name = "2-in-1"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Performance"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Gaming Ultra"
                        });
                });

            modelBuilder.Entity("Tut3.Models.Laptop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Laptop");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            Color = "Black",
                            Image = "https://example.com/asus-tuf-f15.jpg",
                            Model = "Asus TUF Gaming F15",
                            Price = 999.0,
                            Quantity = 10
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 3,
                            Color = "Silver",
                            Image = "https://example.com/dell-xps-13.jpg",
                            Model = "Dell XPS 13",
                            Price = 1399.0,
                            Quantity = 8
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 4,
                            Color = "Silver",
                            Image = "https://example.com/hp-envy-x360.jpg",
                            Model = "HP Envy x360",
                            Price = 1149.0,
                            Quantity = 6
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 2,
                            Color = "Black",
                            Image = "https://example.com/thinkpad-x1-carbon.jpg",
                            Model = "Lenovo ThinkPad X1 Carbon",
                            Price = 1699.0,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 3,
                            Color = "Space Gray",
                            Image = "https://example.com/macbook-air-m2.jpg",
                            Model = "Apple MacBook Air M2",
                            Price = 1199.0,
                            Quantity = 12
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 8,
                            Color = "Platinum",
                            Image = "https://example.com/surface-laptop-5.jpg",
                            Model = "Microsoft Surface Laptop 5",
                            Price = 1299.0,
                            Quantity = 7
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 1,
                            Color = "Black",
                            Image = "https://example.com/razer-blade-15.jpg",
                            Model = "Razer Blade 15",
                            Price = 2499.0,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 6,
                            Color = "Silver",
                            Image = "https://example.com/acer-swift-3.jpg",
                            Model = "Acer Swift 3",
                            Price = 799.0,
                            Quantity = 9
                        },
                        new
                        {
                            Id = 9,
                            BrandId = 9,
                            Color = "White",
                            Image = "https://example.com/lg-gram-17.jpg",
                            Model = "LG Gram 17",
                            Price = 1799.0,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 10,
                            BrandId = 1,
                            Color = "Gray",
                            Image = "https://example.com/rog-zephyrus-g14.jpg",
                            Model = "Asus ROG Zephyrus G14",
                            Price = 1599.0,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 11,
                            BrandId = 6,
                            Color = "Black",
                            Image = "https://example.com/dell-inspiron-15.jpg",
                            Model = "Dell Inspiron 15",
                            Price = 699.0,
                            Quantity = 8
                        },
                        new
                        {
                            Id = 12,
                            BrandId = 6,
                            Color = "Gold",
                            Image = "https://example.com/hp-pavilion-15.jpg",
                            Model = "HP Pavilion 15",
                            Price = 749.0,
                            Quantity = 10
                        },
                        new
                        {
                            Id = 13,
                            BrandId = 3,
                            Color = "Gray",
                            Image = "https://example.com/lenovo-ideapad-5.jpg",
                            Model = "Lenovo IdeaPad 5",
                            Price = 849.0,
                            Quantity = 6
                        },
                        new
                        {
                            Id = 14,
                            BrandId = 8,
                            Color = "Silver",
                            Image = "https://example.com/galaxy-book-3.jpg",
                            Model = "Samsung Galaxy Book 3",
                            Price = 1249.0,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 15,
                            BrandId = 1,
                            Color = "Black",
                            Image = "https://example.com/msi-katana-gf66.jpg",
                            Model = "MSI Katana GF66",
                            Price = 1049.0,
                            Quantity = 6
                        },
                        new
                        {
                            Id = 16,
                            BrandId = 6,
                            Color = "Green",
                            Image = "https://example.com/vivobook-s14.jpg",
                            Model = "Asus VivoBook S14",
                            Price = 749.0,
                            Quantity = 7
                        },
                        new
                        {
                            Id = 17,
                            BrandId = 3,
                            Color = "Silver",
                            Image = "https://example.com/macbook-pro-14.jpg",
                            Model = "Apple MacBook Pro 14",
                            Price = 1999.0,
                            Quantity = 10
                        },
                        new
                        {
                            Id = 18,
                            BrandId = 1,
                            Color = "Black",
                            Image = "https://example.com/alienware-m15-r7.jpg",
                            Model = "Alienware m15 R7",
                            Price = 2299.0,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 19,
                            BrandId = 7,
                            Color = "Silver",
                            Image = "https://example.com/chromebook-spin-713.jpg",
                            Model = "Chromebook Spin 713",
                            Price = 629.0,
                            Quantity = 9
                        },
                        new
                        {
                            Id = 20,
                            BrandId = 9,
                            Color = "Black",
                            Image = "https://example.com/gigabyte-aero-16.jpg",
                            Model = "Gigabyte Aero 16",
                            Price = 2399.0,
                            Quantity = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tut3.Models.Laptop", b =>
                {
                    b.HasOne("Tut3.Models.Brand", "Brand")
                        .WithMany("Laptops")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
